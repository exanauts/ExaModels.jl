var documenterSearchIndex = {"docs":
[{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"EditURL = \"guide.jl\"","category":"page"},{"location":"guide/#Getting-Started","page":"Quick Start","title":"Getting Started","text":"","category":"section"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"ExaModels can create nonlinear prgogramming models and allows solving the created models using NLP solvers (in particular, those that are interfaced with NLPModels, such as NLPModelsIpopt. We now use ExaModels to model the following nonlinear program:","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"beginaligned\nmin_x_i_i=0^N sum_i=2^N  100(x_i-1^2-x_i)^2+(x_i-1-1)^2\ntextst   3x_i+1^3+2x_i+2-5+sin(x_i+1-x_i+2)sin(x_i+1+x_i+2)+4x_i+1-x_i e^x_i-x_i+1-3 = 0\nendaligned","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"We model the problem with:","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"using ExaModels","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"We set","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"N = 10000","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"10000","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"First, we create a ExaModels.Core.","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"c = ExaCore()","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"An ExaCore\n\n  Float type: ...................... Float64\n  Array type: ...................... Vector{Float64}\n  Backend: ......................... Nothing\n\n  number of objective patterns: .... 0\n  number of constraint patterns: ... 0\n","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"The variables can be created as follows:","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"x = variable(\n    c, N;\n    start = (mod(i,2)==1 ? -1.2 : 1. for i=1:N)\n)","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"Variable\n\n  x ∈ R^{10000}\n","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"The objective can be set as follows:","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"objective(c, 100*(x[i-1]^2-x[i])^2+(x[i-1]-1)^2 for i in 2:N)","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"Objective\n\n  min (...) + ∑_{p ∈ P} f(x,p)\n\n  where |P| = 9999\n","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"The constraints can be set as follows:","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"constraint(\n    c,\n    3x[i+1]^3+2*x[i+2]-5+sin(x[i+1]-x[i+2])sin(x[i+1]+x[i+2])+4x[i+1]-x[i]exp(x[i]-x[i+1])-3\n    for i in 1:N-2)","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"Constraint\n\n  s.t. (...)\n       g♭ ≤ [g(x,p)]_{p ∈ P} ≤ g♯\n\n  where |P| = 9998\n","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"Finally, we create an NLPModel.","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"m = ExaModel(c)","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"An ExaModel\n\n  Problem name: Generic\n   All variables: ████████████████████ 10000  All constraints: ████████████████████ 9998  \n            free: ████████████████████ 10000             free: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0     \n           lower: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0                lower: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0     \n           upper: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0                upper: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0     \n         low/upp: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0              low/upp: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0     \n           fixed: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0                fixed: ████████████████████ 9998  \n          infeas: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0               infeas: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0     \n            nnzh: ( 99.82% sparsity)   89985           linear: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0     \n                                                    nonlinear: ████████████████████ 9998  \n                                                         nnzj: ( 99.97% sparsity)   29994 \n\n","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"To solve the problem with Ipopt,","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"using NLPModelsIpopt\nsol = ipopt(m)","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"\"Execution stats: first-order stationary\"","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"The solution sol contains the field sol.solution holding the optimized parameters.","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"","category":"page"},{"location":"guide/","page":"Quick Start","title":"Quick Start","text":"This page was generated using Literate.jl.","category":"page"},{"location":"core/#ExaModels","page":"API Manual","title":"ExaModels","text":"","category":"section"},{"location":"core/","page":"API Manual","title":"API Manual","text":"Modules = [ExaModels]","category":"page"},{"location":"core/#ExaModels.ExaModels","page":"API Manual","title":"ExaModels.ExaModels","text":"ExaModels\n\nAn algebraic modeling and automatic differentiation tool in Julia Language, specialized for SIMD abstraction of nonlinear programs.\n\nFor more information, please visit https://github.com/sshin23/ExaModels.jl\n\n\n\n\n\n","category":"module"},{"location":"core/#ExaModels.ExaCore","page":"API Manual","title":"ExaModels.ExaCore","text":"ExaCore([array_type::Type, backend])\n\nReturns an intermediate data object ExaCore, which later can be used for creating ExaModel\n\nExample\n\njulia> using ExaModels\n\njulia> c = ExaCore()\nAn ExaCore\n\n  Float type: ...................... Float64\n  Array type: ...................... Vector{Float64}\n  Backend: ......................... Nothing\n\n  number of objective patterns: .... 0\n  number of constraint patterns: ... 0\n\njulia> c = ExaCore(Float32)\nAn ExaCore\n\n  Float type: ...................... Float32\n  Array type: ...................... Vector{Float32}\n  Backend: ......................... Nothing\n\n  number of objective patterns: .... 0\n  number of constraint patterns: ... 0\n\njulia> using CUDA\n\njulia> c = ExaCore(Float32, CUDABackend())\nAn ExaCore\n\n  Float type: ...................... Float32\n  Array type: ...................... CUDA.CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}\n  Backend: ......................... CUDA.CUDAKernels.CUDABackend\n\n  number of objective patterns: .... 0\n  number of constraint patterns: ... 0\n\n\n\n\n\n","category":"type"},{"location":"core/#ExaModels.ExaModel-Tuple{C} where C<:ExaCore","page":"API Manual","title":"ExaModels.ExaModel","text":"ExaModel(core)\n\nReturns an ExaModel object, which can be solved by nonlinear optimization solvers within JuliaSmoothOptimizer ecosystem, such as NLPModelsIpopt or MadNLP.\n\nExample\n\njulia> using ExaModels\n\njulia> c = ExaCore();                      # create an ExaCore object\n\njulia> x = variable(c, 1:10);              # create variables\n\njulia> objective(c, x[i]^2 for i in 1:10); # set objective function\n\njulia> m = ExaModel(c)                     # creat an ExaModel object\nAn ExaModel\n\n  Problem name: Generic\n   All variables: ████████████████████ 10     All constraints: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n            free: ████████████████████ 10                free: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n           lower: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0                lower: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n           upper: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0                upper: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n         low/upp: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0              low/upp: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n           fixed: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0                fixed: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n          infeas: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0               infeas: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n            nnzh: ( 81.82% sparsity)   10              linear: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n                                                    nonlinear: ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅ 0\n                                                         nnzj: (------% sparsity)\n\njulia> using NLPModelsIpopt\n\njulia> result = ipopt(m; print_level=0)    # solve the problem\n\"Execution stats: first-order stationary\"\n\n\n\n\n\n\n","category":"method"},{"location":"core/#ExaModels.constraint-Union{Tuple{C}, Tuple{T}, Tuple{C, Base.Generator}} where {T, C<:(ExaCore{T, VT} where VT<:AbstractVector{T})}","page":"API Manual","title":"ExaModels.constraint","text":"constraint(core, generator; start = 0, lcon = 0,  ucon = 0)\n\nAdds constraints specified by a generator to core, and returns an Constraint object. \n\nKeyword Arguments\n\nstart: The initial guess of the solution. Can either be Number, AbstractArray, or Generator.\nlcon : The constraint lower bound. Can either be Number, AbstractArray, or Generator.\nucon : The constraint upper bound. Can either be Number, AbstractArray, or Generator.\n\nExample\n\njulia> using ExaModels\n\njulia> c = ExaCore();\n\njulia> x = variable(c, 10);\n\njulia> constraint(c, x[i] + x[i+1] for i=1:9; lcon = -1, ucon = (1+i for i=1:9))\nConstraint\n\n  s.t. (...)\n       g♭ ≤ [g(x,p)]_{p ∈ P} ≤ g♯\n\n  where |P| = 9\n\n\n\n\n\n","category":"method"},{"location":"core/#ExaModels.multipliers-Tuple{ExaModels.Constraint, SolverCore.AbstractExecutionStats}","page":"API Manual","title":"ExaModels.multipliers","text":"multipliers(y, result)\n\nReturns the multipliers for constraints y associated with result, obtained by solving the model.\n\nExample\n\njulia> using ExaModels, NLPModelsIpopt\n\njulia> c = ExaCore();                     \n\njulia> x = variable(c, 1:10, lvar = -1, uvar = 1);\n\njulia> objective(c, (x[i]-2)^2 for i in 1:10);\n\njulia> y = constraint(c, x[i] + x[i+1] for i=1:9; lcon = -1, ucon = (1+i for i=1:9));\n\njulia> m = ExaModel(c);                   \n\njulia> result = ipopt(m; print_level=0);\n\njulia> val = multipliers(y, result);\n\njulia> val[1] ≈ 0.81933930\ntrue\n\n\n\n\n\n","category":"method"},{"location":"core/#ExaModels.multipliers_L-Tuple{ExaModels.Variable, SolverCore.AbstractExecutionStats}","page":"API Manual","title":"ExaModels.multipliers_L","text":"multipliers_L(x, result)\n\nReturns the multipliers_L for variable x associated with result, obtained by solving the model.\n\nExample\n\njulia> using ExaModels, NLPModelsIpopt\n\njulia> c = ExaCore();                     \n\njulia> x = variable(c, 1:10, lvar = -1, uvar = 1);\n\njulia> objective(c, (x[i]-2)^2 for i in 1:10);\n\njulia> m = ExaModel(c);                   \n\njulia> result = ipopt(m; print_level=0);\n\njulia> val = multipliers_L(x, result);\n\njulia> isapprox(val, fill(0, 10), atol=sqrt(eps(Float64)), rtol=Inf)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"core/#ExaModels.multipliers_U-Tuple{ExaModels.Variable, SolverCore.AbstractExecutionStats}","page":"API Manual","title":"ExaModels.multipliers_U","text":"multipliers_U(x, result)\n\nReturns the multipliers_U for variable x associated with result, obtained by solving the model.\n\nExample\n\njulia> using ExaModels, NLPModelsIpopt\n\njulia> c = ExaCore();                     \n\njulia> x = variable(c, 1:10, lvar = -1, uvar = 1);\n\njulia> objective(c, (x[i]-2)^2 for i in 1:10);\n\njulia> m = ExaModel(c);                   \n\njulia> result = ipopt(m; print_level=0);\n\njulia> val = multipliers_U(x, result);\n\njulia> isapprox(val, fill(2, 10), atol=sqrt(eps(Float64)), rtol=Inf)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"core/#ExaModels.objective-Union{Tuple{C}, Tuple{C, Any}} where C<:ExaCore","page":"API Manual","title":"ExaModels.objective","text":"objective(core::ExaCore, generator)\n\nAdds objective terms specified by a generator to core, and returns an Objective object. \n\nExample\n\njulia> using ExaModels\n\njulia> c = ExaCore();\n\njulia> x = variable(c, 10);\n\njulia> objective(c, x[i]^2 for i=1:10)\nObjective\n\n  min (...) + ∑_{p ∈ P} f(x,p)\n\n  where |P| = 10\n\n\n\n\n\n","category":"method"},{"location":"core/#ExaModels.solution-Tuple{ExaModels.Variable, SolverCore.AbstractExecutionStats}","page":"API Manual","title":"ExaModels.solution","text":"solution(x, result)\n\nReturns the solution for variable x associated with result, obtained by solving the model.\n\nExample\n\njulia> using ExaModels, NLPModelsIpopt\n\njulia> c = ExaCore();                     \n\njulia> x = variable(c, 1:10, lvar = -1, uvar = 1);\n\njulia> objective(c, (x[i]-2)^2 for i in 1:10);\n\njulia> m = ExaModel(c);                   \n\njulia> result = ipopt(m; print_level=0);\n\njulia> val = solution(x, result);\n\njulia> isapprox(val, fill(1, 10), atol=sqrt(eps(Float64)), rtol=Inf)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"core/#ExaModels.variable-Union{Tuple{C}, Tuple{T}, Tuple{C, Vararg{Any}}} where {T, C<:(ExaCore{T, VT} where VT<:AbstractVector{T})}","page":"API Manual","title":"ExaModels.variable","text":"variable(core, dims...; start = 0, lvar = -Inf, uvar = Inf)\n\nAdds variables with dimensions specified by dims to core, and returns Variable object. dims can be either Integer or UnitRange.\n\nKeyword Arguments\n\nstart: The initial guess of the solution. Can either be Number, AbstractArray, or Generator.\nlvar : The variable lower bound. Can either be Number, AbstractArray, or Generator.\nuvar : The variable upper bound. Can either be Number, AbstractArray, or Generator.\n\nExample\n\njulia> using ExaModels\n\njulia> c = ExaCore();\n\njulia> x = variable(c, 10; start = (sin(i) for i=1:10))\nVariable\n\n  x ∈ R^{10}\n\njulia> y = variable(c, 2:10, 3:5; lvar = zeros(9,3), uvar = ones(9,3))\nVariable\n\n  x ∈ R^{9 × 3}\n\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the documentation of ExaModels.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"warning: Warning\nThis documentation page is under construction.","category":"page"},{"location":"#What-is-ExaModels?","page":"Introduction","title":"What is ExaModels?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ExaModels.jl implements SIMD abstraction of nonlinear programs and the automatic differentiation of its functions. ExaModels.jl expresses the functions in the form of iterables over statically typed data. This allows highly efficient derivative computations based on reverse-mode automatic differentiation.","category":"page"},{"location":"#Bug-reports-and-support","page":"Introduction","title":"Bug reports and support","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Please report issues and feature requests via the Github issue tracker. ","category":"page"}]
}
